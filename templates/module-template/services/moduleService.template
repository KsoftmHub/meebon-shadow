import { Service } from "typedi";
import { AppDataSource } from "../../../sources/data-source";
import { validateOrReject } from 'class-validator';
import { {{module_name}} } from "../../../entity/{{module_name}}";
import { I{{module_name}}Service } from "../interfaces/I{{module_name}}Service";

@Service<{{module_name}}>()
export class {{module_name}}Service implements I{{module_name}}Service {
  private {{module_name_camel_case}}Repository = AppDataSource.getRepository({{module_name}});

  async getAll(): Promise<{{module_name}}[]> {
    return this.{{module_name_camel_case}}Repository.find();
  }

  async getById(id: number): Promise<{{module_name}} | undefined> {
    return this.{{module_name_camel_case}}Repository.findOneBy({ id });
  }

  async create(data: {{module_name}}): Promise<{{module_name}}> {
    const {{module_name_camel_case}} = this.{{module_name_camel_case}}Repository.create(data);
    await validateOrReject({{module_name_camel_case}});
    return this.{{module_name_camel_case}}Repository.save({{module_name_camel_case}});
  }

  async update(id: number, data: any): Promise<{{module_name}} | undefined> {
    const {{module_name_camel_case}} = await this.getById(id);
    if (!{{module_name_camel_case}}) {
      return undefined;
    }
    this.{{module_name_camel_case}}Repository.merge({{module_name_camel_case}}, data);
    await validateOrReject({{module_name_camel_case}});
    return this.{{module_name_camel_case}}Repository.save({{module_name_camel_case}});
  }

  async delete(id: number): Promise<boolean> {
    const {{module_name_camel_case}} = await this.getById(id);
    if (!{{module_name_camel_case}}) {
      return false;
    }
    await this.{{module_name_camel_case}}Repository.softRemove({{module_name_camel_case}});
    return true;
  }
}